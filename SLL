#include<stdlib.h>
#include<stdio.h>

int count=0;
struct node
{
    int data;
    struct node *next;
}*head=NULL,*temp=NULL,*newnode;

void create()
{
    if(head==NULL)
    {
        newnode = (struct node*)malloc(sizeof(struct node));
        newnode->next = NULL;
        printf("Enter data: ");
        scanf("%d",&newnode->data);
        head = newnode;
        count++;
    }
    else
    {
        printf("List is already created!!");
    }
    display();
}

void display()
{
    if(head==NULL)
    {
        printf("The List is empty");
    }
    else
    {
        temp = head;
        printf("The List elements are: ");
        while(temp!=NULL)
        {
            printf("%d\t",temp->data);
            temp = temp->next;
        }
    }
}

void insert_begin()
{
    newnode = (struct node*)malloc(sizeof(struct node));
    newnode->next = NULL;
    printf("Enter data: ");
    scanf("%d",&newnode->data);
    newnode->next = head;
    head = newnode;
    count++;
    display();
}

void insert_end()
{
    temp = head;
    newnode = (struct node*)malloc(sizeof(struct node));
    newnode->next = NULL;
    printf("Enter data: ");
    scanf("%d",&newnode->data);
    while(temp->next!=NULL)
    {
        temp = temp->next;
    }
    temp->next = newnode;
    count++;
    display();
}

void insert_pos()
{
    int pos;
    int i=1;
    temp = head;
    printf("Enter the position: ");
    scanf("%d",&pos);
    if(pos>count+1)
    {
        printf("Insertion not possible");
    }
    else
    {
        if(pos==1)
        {
            insert_begin();
        }
        else if(pos==count+1)
        {
            insert_end();
        }
        else
        {
            newnode = (struct node*)malloc(sizeof(struct node));
            newnode->next = NULL;
            printf("Enter data: ");
            scanf("%d",&newnode->data);
            while(i<pos-1)
            {
                temp = temp->next;
                i++;
            }
            newnode->next = temp->next;
            temp->next = newnode;
            count++;
            display();
        }
    }
}

void delete_begin()
{
    temp = head;
    head = head->next;
    printf("The deleted element is: %d",temp->data);
    free(temp);
    count--;
    display();
}

void delete_end()
{
    temp = head;
    struct node *prenode;
    while(temp->next!=NULL)
    {
        prenode = temp;
        temp = temp->next;
    }
    prenode->next = NULL;
    printf("The deleted element is: %d",temp->data);
    free(temp);
    count--;
    display();
}

void delete_pos()
{
    int pos;
    int i=1;
    struct node *nextnode;
    printf("Enter the position: ");
    scanf("%d",&pos);
    temp = head;
    if(pos>count)
    {
        printf("Deletion not possible");
    }
    else
    {
        if(pos==1)
        {
            delete_begin();
        }
        else if(pos==count)
        {
            delete_end();
        }
        else
        {
            while(i<pos-1)
            {
                temp = temp->next;
                i++;
            }
            nextnode = temp->next;
            temp->next = nextnode->next;
            printf("The deleted element is: %d",nextnode->data);
            free(nextnode);
            count--;
            display();
        }
    }
}

int main()
{
    int choice;
    while(1)
    {
        printf("\n***************MENU****************\n");
        printf("\n1. Create");
        printf("\n2. Display");
        printf("\n3. Insert at the beginning");
        printf("\n4. Insert at the end");
        printf("\n5. Insert at specified position");
        printf("\n6. Delete from beginning");
        printf("\n7. Delete from the end");
        printf("\n8. Delete from specified position");
        printf("\n9. Exit\n");
        printf("\nEnter your choice: ");
        scanf("%d",&choice);
        switch(choice)
        {
            case 1:
                create();
                break;
            case 2:
                display();
                break;
            case 3:
                insert_begin();
                break;
            case 4:
                insert_end();
                break;
            case 5:
                insert_pos();
                break;
            case 6:
                delete_begin();
                break;
            case 7:
                delete_end();
                break;
            case 8:
                delete_pos();
                break;
            case 9:
                exit(0);
                break;

            default:
                printf("\nInvalid Choice\n");
                break;
        }
        printf("Count = %d",count);
    }
    return 0;
}
